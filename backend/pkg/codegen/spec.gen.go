// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
