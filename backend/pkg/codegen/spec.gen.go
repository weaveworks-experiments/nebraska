// Package codegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package codegen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
